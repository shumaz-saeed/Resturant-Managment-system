import sqlite3
import logging
from datetime import datetime
import csv

logging.basicConfig(filename='restaurant.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

db = sqlite3.connect('restaurant.db')
cursor = db.cursor()

def setup_database():
    cursor.execute('''CREATE TABLE IF NOT EXISTS workers (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        role TEXT NOT NULL
                    )''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS orders (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        table_number INTEGER,
                        items TEXT,
                        total_price REAL,
                        timestamp TEXT
                    )''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS tables (
                        number INTEGER PRIMARY KEY,
                        seats INTEGER,
                        is_reserved INTEGER DEFAULT 0
                    )''')

    for table_number in range(1, 5):
        cursor.execute('INSERT OR IGNORE INTO tables (number, seats, is_reserved) VALUES (?, ?, ?)',
                       (table_number, 3, 0))
    for table_number in range(5, 9):
        cursor.execute('INSERT OR IGNORE INTO tables (number, seats, is_reserved) VALUES (?, ?, ?)',
                       (table_number, 2, 0))
    for table_number in range(9, 13):
        cursor.execute('INSERT OR IGNORE INTO tables (number, seats, is_reserved) VALUES (?, ?, ?)',
                       (table_number, 4, 0))
    db.commit()

class MenuItem:
    def __init__(self, id, name, price, category, description):
        self.id = id
        self.name = name
        self.price = price
        self.category = category
        self.description = description

class Menu:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)
        logging.info(f"Added Menu Item: {item.name} - {item.price}")

    def remove_item(self, item_id):
        self.items = [item for item in self.items if item.id != item_id]
        logging.info(f"Removed Menu Item with ID: {item_id}")

    def view_menu(self):
        print("\n--- Menu ---")
        for item in self.items:
            print(f"{item.id}. {item.name} - {item.price}")

class Restaurant:
    def __init__(self, menu):
        self.menu = menu

    def place_order(self, table_number, item_ids):
        total = 0
        order_items = []

        for id in item_ids:
            item = next((i for i in self.menu.items if i.id == id), None)
            if item:
                order_items.append(item.name)
                total += item.price
            else:
                print(f"Item ID '{id}' not found in menu.")

        items_str = ', '.join(order_items)
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        cursor.execute('INSERT INTO orders (table_number, items, total_price, timestamp) VALUES (?, ?, ?, ?)',
                       (table_number, items_str, total, timestamp))
        db.commit()

        receipt = f"--- Receipt ---\nTable: {table_number}\nItems: {items_str}\nTotal: {total}\nTime: {timestamp}"
        print(receipt)

        with open(f"receipt_table_{table_number}.txt", 'w') as f:
            f.write(receipt)

        with open('receipts.csv', 'a', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([table_number, items_str, total, timestamp])

        logging.info(f"Order Placed - Table {table_number}: {items_str} - Total: {total}")

        while True:
            payment_mode = input("Select Payment Method (Cash/Card): ").strip().lower()
            if payment_mode == 'cash':
                print("Payment received in cash. Thank you!")
                logging.info(f"Payment Method: Cash")
                break
            elif payment_mode == 'card':
                while True:
                    account_number = input("Enter your 11-digit account number: ")
                    if len(account_number) == 11 and account_number.isdigit():
                        print("Payment processed through card. Thank you!")
                        logging.info(f"Payment Method: Card")
                        break
                    else:
                        print("Invalid account number. Please enter exactly 11 digits.")
                break
            else:
                print("Invalid option. Please choose 'Cash' or 'Card'.")

        if table_number != 0:
            cursor.execute('UPDATE tables SET is_reserved = 0 WHERE number = ?', (table_number,))
            db.commit()
            logging.info(f"Table {table_number} unreserved after order completion.")
            print(f"Table {table_number} is now available for others.")

def admin_login():
    return input("Enter admin password: ") == "admin123"

def add_worker():
    if not admin_login():
        print("Unauthorized Access!")
        return
    name = input("Enter worker name: ")
    role = input("Enter worker role: ")
    cursor.execute('INSERT INTO workers (name, role) VALUES (?, ?)', (name, role))
    db.commit()
    logging.info(f"Worker Added - {name}, Role: {role}")

def view_workers():
    if not admin_login():
        print("Unauthorized Access!")
        return
    cursor.execute('SELECT * FROM workers')
    for worker in cursor.fetchall():
        print(f"ID: {worker[0]}, Name: {worker[1]}, Role: {worker[2]}")

def update_worker():
    if not admin_login():
        print("Unauthorized Access!")
        return
    wid = input("Enter worker ID to update: ")
    new_role = input("Enter new role: ")
    cursor.execute('UPDATE workers SET role=? WHERE id=?', (new_role, wid))
    db.commit()
    logging.info(f"Worker Updated - ID: {wid}, New Role: {new_role}")

def remove_worker():
    if not admin_login():
        print("Unauthorized Access!")
        return
    wid = input("Enter worker ID to remove: ")
    cursor.execute('DELETE FROM workers WHERE id=?', (wid,))
    db.commit()
    logging.info(f"Worker Removed - ID: {wid}")

def unreserve_all_tables():
    if not admin_login():
        print("Unauthorized Access!")
        return
    cursor.execute('UPDATE tables SET is_reserved = 0')
    db.commit()
    print("All tables have been unreserved.")
    logging.info("All tables unreserved.")

def view_tables(only_available=False):
    if only_available:
        cursor.execute('SELECT * FROM tables WHERE is_reserved = 0')
    else:
        cursor.execute('SELECT * FROM tables')
    tables = cursor.fetchall()

    if not tables:
        print("No available tables." if only_available else "No tables found.")
        return

    for table in tables:
        status = "Reserved" if table[2] else "Free"
        print(f"Table {table[0]} ({table[1]} seats): {status}")

def reserve_table(seats_required):
    while True:
        print(f"\nAvailable tables with exactly {seats_required} seats:")
        cursor.execute('SELECT * FROM tables WHERE is_reserved = 0 AND seats = ?', (seats_required,))
        tables = cursor.fetchall()

        if not tables:
            print(f"No available tables with exactly {seats_required} seats. Please try again later or choose a different number of seats.")
            return None

        for table in tables:
            print(f"Table {table[0]} ({table[1]} seats): Free")

        try:
            num = int(input("Enter table number to reserve: "))
        except ValueError:
            print("Invalid input. Please enter a numeric table number.")
            continue

        cursor.execute('SELECT seats, is_reserved FROM tables WHERE number = ?', (num,))
        result = cursor.fetchone()

        if not result:
            print(f"Table {num} does not exist. Please try again.")
            continue
        if result[1] == 1:
            print(f"Table {num} is already reserved. Please choose another table.")
            continue
        if result[0] != seats_required: 
            print(f"Table {num} does not have exactly {seats_required} seats. Please choose a suitable table from the list.")
            continue

        cursor.execute('UPDATE tables SET is_reserved = 1 WHERE number = ?', (num,))
        db.commit()
        print(f"Table {num} has been reserved successfully.")
        logging.info(f"Table {num} reserved for {seats_required} seats (exact match)")
        return num
def main():
    setup_database()

    menu = Menu()
    menu.add_item(MenuItem(1, "Burger", 599, "Fast Food", "Crispy fried thigh, crispy lettuce, spicy dynamite sauce, served in a sesame seed bun."))
    menu.add_item(MenuItem(2, "Pizza", 899, "Fast Food", "Spicy chicken, creamy homemade sauce, green peppers, onion mushrooms, chicken sausages, black olives and lots of cheese."))
    menu.add_item(MenuItem(3, "Pasta", 750, "Fast Food", "Fried chicken, mushrooms, and penne pasta baked in a blend of farmhouse, garnished with black olives and mozzarella cheese."))

    restaurant = Restaurant(menu)

    while True:
        print("--- Welcome to the Restaurant ---")

        while True:
            customer_name = input("Please enter your name: ")
            if any(char.isdigit() for char in customer_name) or not customer_name.strip():
                print("Invalid name. Please try again without numbers or empty input.")
            else:
                break

        print(f"Welcome {customer_name}!")

        opt = input("1. Dine in  \n2. Takeaway  \n3. Exit \n")

        if opt == '1':
            table_number = None
            while True:
                print("\n1. View tables (all)\n2. Reserve table\n3. Proceed to Menu (if you already have a table)")
                op1 = input("Select an option: ")

                if op1 == '1':
                    view_tables()
                elif op1 == '2':
                    while True:
                        try:
                            seats_required = int(input("How many seats do you need? "))
                            if seats_required <= 0:
                                print("Please enter a positive number.")
                                continue
                            break
                        except ValueError:
                            print("Invalid input. Please enter a numeric value.")
                            continue

                    table_number = reserve_table(seats_required)
                    if table_number:
                        print("\nTable reserved. Proceeding to Menu...\n")
                        break 
                    else:
                        print("Reservation failed. Returning to the dine-in options.")
                        continue 
                elif op1 == '3':
                    try:
                        table_number = int(input("Enter your Table Number: "))
                        cursor.execute('SELECT is_reserved FROM tables WHERE number = ?', (table_number,))
                        result = cursor.fetchone()
                        if not result or result[0] == 0:
                            print(f"Table {table_number} is not reserved or does not exist. Please reserve it first or enter a valid reserved table number.")
                            table_number = None 
                            continue
                        break 
                    except ValueError:
                        print("Invalid input. Please enter a numeric table number.")
                        continue
                else:
                    print("Invalid option. Please select 1, 2, or 3.")


            if table_number is not None:
                order_item_ids = []
                while True:
                    menu.view_menu()
                    try:
                        item_id = int(input("Enter item ID to order: "))
                    
                        if any(item.id == item_id for item in menu.items):
                            order_item_ids.append(item_id)
                        else:
                            print(f"Item ID '{item_id}' not found in menu. Please enter a valid item ID.")
                            continue
                    except ValueError:
                        print("Invalid input. Please enter a numeric item ID.")
                        continue

                    more = input("Do you want to add another item? (yes/no): ").lower()
                    if more != 'yes':
                        break

                if order_item_ids: 
                    restaurant.place_order(table_number, order_item_ids)
                else:
                    print("No items ordered. Returning to main menu.")

        elif opt == '2':
            print("Notice: your takeaway order will take 30 min to get prepared.")
            while True:
                print("\n--- Takeaway Menu ---")
                print("1. View Menu\n2. Place Order\n3. Admin Panel\n4. Exit to Main Menu")
                choice = input("Select an option: ")

                if choice == '1':
                    menu.view_menu()
                elif choice == '2':
                    order_item_ids = []
                    while True:
                        menu.view_menu()
                        try:
                            item_id = int(input("Enter item ID to order: "))
                            if any(item.id == item_id for item in menu.items):
                                order_item_ids.append(item_id)
                            else:
                                print(f"Item ID '{item_id}' not found in menu. Please enter a valid item ID.")
                                continue
                        except ValueError:
                            print("Invalid input. Please enter a numeric item ID.")
                            continue

                        more = input("Do you want to add another item? (yes/no): ").lower()
                        if more != 'yes':
                            break
                    if order_item_ids:
                        restaurant.place_order(0, order_item_ids) 
                    else:
                        print("No items ordered. Returning to takeaway menu.")
                elif choice == '3':
                    print("1. Add Worker\n2. View Workers\n3. Update Worker\n4. Remove Worker\n5. Unreserve All Tables")
                    admin_opt = input("Select: ")
                    if admin_opt == '1':
                        add_worker()
                    elif admin_opt == '2':
                        view_workers()
                    elif admin_opt == '3':
                        update_worker()
                    elif admin_opt == '4':
                        remove_worker()
                    elif admin_opt == '5':
                        unreserve_all_tables()
                    else:
                        print("Invalid admin option.")
                elif choice == '4':
                    break
                else:
                    print("Invalid option. Please select 1, 2, 3, or 4.")

        elif opt == '3':
            print("Thank you for visiting us!")
            break
        else:
            print("Invalid option. Please select 1, 2, or 3.")

if __name__ == "__main__":
    main()
    db.close()

if __name__ == "__main__":
    main()
    db.close()
